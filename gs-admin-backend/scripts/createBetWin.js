const { Sequelize } = require("sequelize");
const cliProgress = require("cli-progress");
const path = require("path");
require("dotenv").config({ path: path.resolve(__dirname, "../.env") });

console.log("DB DB_NAME = ", process.env.DB_NAME);
console.log("DB DB_PASSWORD = ", process.env.DB_PASSWORD);
console.log("DB DB_HOST = ", process.env.DB_HOST);
console.log("DB UserName = ", process.env.DB_USER);

const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: "localhost",
    dialect: "postgres",
    logging: false,
  }
);

Object.keys({
  BD: "BGD",
  BE: "BEL",
  BF: "BFA",
  BG: "BGR",
  BA: "BIH",
  BB: "BRB",
  WF: "WLF",
  BL: "BLM",
  BM: "BMU",
  BN: "BRN",
  BO: "BOL",
  BH: "BHR",
  BI: "BDI",
  BJ: "BEN",
  BT: "BTN",
  JM: "JAM",
  BV: "BVT",
  BW: "BWA",
  WS: "WSM",
  BQ: "BES",
  BR: "BRA",
  BS: "BHS",
  JE: "JEY",
  BY: "BLR",
  BZ: "BLZ",
  RU: "RUS",
  RW: "RWA",
  RS: "SRB",
  TL: "TLS",
  RE: "REU",
  TM: "TKM",
  TJ: "TJK",
  RO: "ROU",
  TK: "TKL",
  GW: "GNB",
  GU: "GUM",
  GT: "GTM",
  GS: "SGS",
  GR: "GRC",
  GQ: "GNQ",
  GP: "GLP",
  JP: "JPN",
  GY: "GUY",
  GG: "GGY",
  GF: "GUF",
  GE: "GEO",
  GD: "GRD",
  GB: "GBR",
  GA: "GAB",
  SV: "SLV",
  GN: "GIN",
  GM: "GMB",
  GL: "GRL",
  GI: "GIB",
  GH: "GHA",
  OM: "OMN",
  TN: "TUN",
  JO: "JOR",
  HR: "HRV",
  HT: "HTI",
  HU: "HUN",
  HK: "HKG",
  HN: "HND",
  HM: "HMD",
  VE: "VEN",
  PR: "PRI",
  PS: "PSE",
  PW: "PLW",
  PT: "PRT",
  SJ: "SJM",
  PY: "PRY",
  IQ: "IRQ",
  PA: "PAN",
  PF: "PYF",
  PG: "PNG",
  PE: "PER",
  PK: "PAK",
  PH: "PHL",
  PN: "PCN",
  PL: "POL",
  PM: "SPM",
  ZM: "ZMB",
  EH: "ESH",
  EE: "EST",
  EG: "EGY",
  ZA: "ZAF",
  EC: "ECU",
  IT: "ITA",
  VN: "VNM",
  SB: "SLB",
  ET: "ETH",
  SO: "SOM",
  ZW: "ZWE",
  SA: "SAU",
  ES: "ESP",
  ER: "ERI",
  ME: "MNE",
  MD: "MDA",
  MG: "MDG",
  MF: "MAF",
  MA: "MAR",
  MC: "MCO",
  UZ: "UZB",
  MM: "MMR",
  ML: "MLI",
  MO: "MAC",
  MN: "MNG",
  MH: "MHL",
  MK: "MKD",
  MU: "MUS",
  MT: "MLT",
  MW: "MWI",
  MV: "MDV",
  MQ: "MTQ",
  MP: "MNP",
  MS: "MSR",
  MR: "MRT",
  IM: "IMN",
  UG: "UGA",
  TZ: "TZA",
  MY: "MYS",
  MX: "MEX",
  IL: "ISR",
  FR: "FRA",
  IO: "IOT",
  SH: "SHN",
  FI: "FIN",
  FJ: "FJI",
  FK: "FLK",
  FM: "FSM",
  FO: "FRO",
  NI: "NIC",
  NL: "NLD",
  NO: "NOR",
  NA: "NAM",
  VU: "VUT",
  NC: "NCL",
  NE: "NER",
  NF: "NFK",
  NG: "NGA",
  NZ: "NZL",
  NP: "NPL",
  NR: "NRU",
  NU: "NIU",
  CK: "COK",
  XK: "XKX",
  CI: "CIV",
  CH: "CHE",
  CO: "COL",
  CN: "CHN",
  CM: "CMR",
  CL: "CHL",
  CC: "CCK",
  CA: "CAN",
  CG: "COG",
  CF: "CAF",
  CD: "COD",
  CZ: "CZE",
  CY: "CYP",
  CX: "CXR",
  CR: "CRI",
  CW: "CUW",
  CV: "CPV",
  CU: "CUB",
  SZ: "SWZ",
  SY: "SYR",
  SX: "SXM",
  KG: "KGZ",
  KE: "KEN",
  SS: "SSD",
  SR: "SUR",
  KI: "KIR",
  KH: "KHM",
  KN: "KNA",
  KM: "COM",
  ST: "STP",
  SK: "SVK",
  KR: "KOR",
  SI: "SVN",
  KP: "PRK",
  KW: "KWT",
  SN: "SEN",
  SM: "SMR",
  SL: "SLE",
  SC: "SYC",
  KZ: "KAZ",
  KY: "CYM",
  SG: "SGP",
  SE: "SWE",
  SD: "SDN",
  DO: "DOM",
  DM: "DMA",
  DJ: "DJI",
  DK: "DNK",
  VG: "VGB",
  DE: "DEU",
  YE: "YEM",
  DZ: "DZA",
  US: "USA",
  UY: "URY",
  YT: "MYT",
  UM: "UMI",
  LB: "LBN",
  LC: "LCA",
  LA: "LAO",
  TV: "TUV",
  TW: "TWN",
  TT: "TTO",
  TR: "TUR",
  LK: "LKA",
  LI: "LIE",
  LV: "LVA",
  TO: "TON",
  LT: "LTU",
  LU: "LUX",
  LR: "LBR",
  LS: "LSO",
  TH: "THA",
  TF: "ATF",
  TG: "TGO",
  TD: "TCD",
  TC: "TCA",
  LY: "LBY",
  VA: "VAT",
  VC: "VCT",
  AE: "ARE",
  AD: "AND",
  AG: "ATG",
  AF: "AFG",
  AI: "AIA",
  VI: "VIR",
  IS: "ISL",
  IR: "IRN",
  AM: "ARM",
  AL: "ALB",
  AO: "AGO",
  AQ: "ATA",
  AS: "ASM",
  AR: "ARG",
  AU: "AUS",
  AT: "AUT",
  AW: "ABW",
  IN: "IND",
  AX: "ALA",
  AZ: "AZE",
  IE: "IRL",
  ID: "IDN",
  UA: "UKR",
  QA: "QAT",
  MZ: "MOZ",
});

const bar1 = new cliProgress.SingleBar({}, cliProgress.Presets.shades_classic);

sequelize.define(
  "User",
  {
    userId: {
      autoIncrement: true,
      type: Sequelize.INTEGER,
      allowNull: false,
      primaryKey: true,
    },
    uniqueId: {
      type: Sequelize.UUID,
      defaultValue: Sequelize.UUIDV4,
    },
    firstName: {
      type: Sequelize.STRING,
      allowNull: false,
    },
    lastName: {
      type: Sequelize.STRING,
      allowNull: false,
    },
    email: {
      type: Sequelize.STRING,
      allowNull: false,
    },
    isEmailVerified: {
      type: Sequelize.BOOLEAN,
      allowNull: true,
      defaultValue: false,
    },
    password: {
      type: Sequelize.STRING,
      allowNull: false,
    },
    phone: {
      type: Sequelize.STRING,
      allowNull: true,
    },
    isPhoneVerified: {
      type: Sequelize.BOOLEAN,
      allowNull: true,
      defaultValue: false,
    },
    dateOfBirth: {
      type: Sequelize.DATE,
      allowNull: false,
    },
    gender: {
      type: Sequelize.STRING,
      allowNull: false,
    },
    locale: {
      type: Sequelize.STRING,
      allowNull: true,
    },
    signInCount: {
      type: Sequelize.INTEGER,
      allowNull: false,
      defaultValue: 0,
    },
    signInIp: {
      type: Sequelize.INET,
      allowNull: true,
    },
    parentType: {
      type: Sequelize.STRING,
      allowNull: true,
    },
    parentId: {
      type: Sequelize.INTEGER,
      allowNull: true,
    },
    username: {
      type: Sequelize.STRING,
      allowNull: true,
    },
    countryCode: {
      type: Sequelize.STRING,
      allowNull: false,
    },
    isActive: {
      type: Sequelize.BOOLEAN,
      allowNull: false,
      defaultValue: true,
    },
    lastLoginDate: {
      type: Sequelize.DATE,
      allowNull: true,
    },
    selfExclusion: {
      type: Sequelize.DATE,
      allowNull: true,
    },
    disabledAt: {
      type: Sequelize.DATE,
      allowNull: true,
    },
    disabledByType: {
      type: Sequelize.STRING,
      allowNull: true,
    },
    disabledById: {
      type: Sequelize.INTEGER,
      allowNull: true,
    },
    disableReason: {
      type: Sequelize.STRING,
      allowNull: true,
    },
    phoneCode: {
      type: Sequelize.STRING,
      allowNull: true,
    },
    newPasswordKey: {
      type: Sequelize.STRING,
      allowNull: true,
    },
    newPasswordRequested: {
      type: Sequelize.DATE,
      allowNull: true,
    },
    emailToken: {
      type: Sequelize.STRING,
      allowNull: true,
    },
    city: {
      type: Sequelize.STRING(255),
      allowNull: true,
    },
    zipCode: {
      type: Sequelize.STRING(255),
      allowNull: true,
    },
    isRetailUser: {
      type: Sequelize.BOOLEAN,
      allowNull: false,
      defaultValue: false,
    },
    affiliateId: {
      type: Sequelize.INTEGER,
      allowNull: true,
    },
    profileImage: {
      type: Sequelize.STRING,
      allowNull: true,
    },
    currencyCode: {
      type: Sequelize.STRING,
      allowNull: false,
    },
    kycStatus: {
      type: Sequelize.STRING,
      allowNull: false,
      defaultValue: "pending",
    },
    documentLabels: {
      type: Sequelize.JSONB,
      allowNull: true,
    },
    requestedDocuments: {
      type: Sequelize.JSONB,
      allowNull: true,
    },
    loggedIn: {
      type: Sequelize.INTEGER,
      allowNull: false,
      defaultValue: 0,
    },
    deviceType: {
      type: Sequelize.STRING,
      allowNull: true,
    },
    address: {
      type: Sequelize.STRING,
      allowNull: false,
    },
    dailyLimit: {
      type: Sequelize.INTEGER,
      allowNull: true,
    },
    dailyLimitExpiry: {
      type: Sequelize.DATE,
      allowNull: true,
    },
    deletedAt: {
      type: Sequelize.DATE,
      allowNull: true,
    },
  },
  {
    sequelize,
    tableName: "users",
    schema: "public",
    timestamps: true,
    underscored: true,
    paranoid: true,
  }
);

const CasinoTransaction = sequelize.define(
  "CasinoTransaction",
  {
    casinoTransactionId: {
      autoIncrement: true,
      type: Sequelize.STRING,
      allowNull: false,
      primaryKey: true,
    },
    walletId: {
      type: Sequelize.INTEGER,
      allowNull: false,
    },
    userId: {
      type: Sequelize.INTEGER,
      allowNull: false,
    },
    gameIdentifier: {
      type: Sequelize.STRING,
      allowNull: true,
    },
    gameId: {
      type: Sequelize.STRING,
      allowNull: true,
    },
    actionType: {
      type: Sequelize.STRING,
      allowNull: false,
    },
    actionId: {
      type: Sequelize.STRING,
      allowNull: false,
    },
    amount: {
      type: Sequelize.INTEGER,
      allowNull: true,
    },
    nonCashAmount: {
      type: Sequelize.INTEGER,
      allowNull: true,
    },
    currencyCode: {
      type: Sequelize.STRING(255),
      allowNull: false,
    },
    beforeBalance: {
      type: Sequelize.INTEGER,
      allowNull: true,
    },
    afterBalance: {
      type: Sequelize.INTEGER,
      allowNull: true,
    },
    status: {
      type: Sequelize.INTEGER,
      allowNull: false,
      defaultValue: 0,
    },
  },
  {
    sequelize,
    tableName: "casino_transactions",
    schema: "casino_system",
    timestamps: true,
    underscored: true,
  }
);

const myArgs = process.argv.slice(2);

const actionType = ["bet", "win", "rollback", "prerollback"];

const createData = async () => {
  let dataList = [];
  const rows = parseInt(myArgs[0]) || 100000;
  bar1.start(rows, 0);
  for (let index = 0; index < rows; index++) {
    // const data = await User.create({
    //   email: 'yay@gstack.com',
    //   password: 'VXNlckAxMjM=',
    //   confirmPassword: 'VXNlckAxMjM=',
    //   firstName: 'Yatharth',
    //   username: 'Yatharth',
    //   lastName: 'Upadhyay',
    //   dateOfBirth: '09-18-1999',
    //   address: 'aaa/ 22 ',
    //   gender: 'Male',
    //   countryCode: countries[Math.floor(Math.random() * countries.length)],
    //   currencyCode: 'EUR',
    //   tenantId: 1,
    //   city: 'script',
    //   zipCode: '452001'
    // })
    dataList.push({
      walletId: 1,
      userId: 1,
      gameIdentifier: "TEST:populate",
      gameId: "1234",
      actionType: actionType[Math.floor(Math.random() * 3)],
      actionId: "2342",
      amount: 2,
      primaryCurrencyAmount: 1,
      currencyCode: "EUR",
      countryCode: "IN",
      status: 1,
    });
    if (dataList.length === 100000) {
      await CasinoTransaction.bulkCreate(dataList);
      dataList = [];
    }
    bar1.increment();
  }

  await CasinoTransaction.bulkCreate(dataList);

  bar1.stop();
  process.exit(0);
};

createData();
